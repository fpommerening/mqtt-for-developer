@page "/Mqtt"
@using FP.Mqtt.WeatherClient.Business
@using FP.Mqtt.WeatherClient.Models
@rendermode InteractiveServer
@inject IConfiguration Configuration;
@inject IMqttRepository MqttRepository;

<PageTitle>MQTT-Settings</PageTitle>

@if (Model == null)
{
    return;
}

<MudGrid>
    <MudItem xs="3"/>
    <MudItem xs="4">
        <MudTextField text="@Model.MqttSettings?.Host"  T="string" Variant="Variant.Outlined" ReadOnly="true" Label="Broker"></MudTextField>
    </MudItem>
    <MudItem xs="2">
        <MudTextField value="@Model.MqttSettings?.Port"  T="int" Variant="Variant.Outlined" ReadOnly="true" Label="Port"></MudTextField>
    </MudItem>
    <MudItem xs="3"/>

    <MudItem xs="3"/>
    <MudItem xs="6">
        <MudStack Row="true" Justify="Justify.Center" Spacing="5">
            <MudCheckBox value="@Model.Protocol?.Mqtt" T="bool" ReadOnly="true" Label="MQTT"></MudCheckBox>
            <MudCheckBox value="@Model.Protocol?.Mqtts" T="bool" ReadOnly="true" Label="MQTTS"></MudCheckBox>
            <MudCheckBox value="@Model.Protocol?.Ws" T="bool" ReadOnly="true" Label="WS"></MudCheckBox>
            <MudCheckBox value="@Model.Protocol?.Wss" T="bool" ReadOnly="true" Label="WSS"></MudCheckBox>
        </MudStack>
    </MudItem>
    <MudItem xs="3"/>
    @if (!string.IsNullOrEmpty(Model.MqttSettings?.User) && !string.IsNullOrEmpty(Model.MqttSettings?.User))
    {
        <MudItem xs="3"/>
        
        <MudItem xs="3">
            <MudTextField text="@Model.MqttSettings?.User"  T="string" Variant="Variant.Outlined" ReadOnly="true" Label="User"></MudTextField>
        </MudItem>
        <MudItem xs="3">
            <MudTextField text="@Model.MqttSettings?.Password"  T="string" Variant="Variant.Outlined" ReadOnly="true" Label="Password"></MudTextField>
        </MudItem>
        <MudItem xs="3"/>
    }
    <MudItem xs="3"/>
    <MudItem xs="6">
        <MudSlider @bind-Value="@Model.PublishSettings.Interval"  Size="Size.Large"  Min="5" Max="60">Publish Interval: @Model.PublishSettings?.Interval Seconds</MudSlider>
    </MudItem>
    <MudItem xs="3"/>
    
    <MudItem xs="2"/>
    <MudItem xs="8">
        <MudTable Items="SortedData" Hover="true" Striped="true" Bordered="true" Breakpoint="Breakpoint.Sm">
            <HeaderContent>
                <MudTh>Topic</MudTh>
                <MudTh>Payload</MudTh>
                <MudTh>Published at</MudTh>
                <MudTh></MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="Topic">@context.Topic</MudTd>
                <MudTd DataLabel="Payload">@context.Payload</MudTd>
                <MudTd DataLabel="Timestamp">@context.Timestamp</MudTd>
            </RowTemplate>
        </MudTable>
    </MudItem>
    <MudItem xs="2"/>
    
</MudGrid>


@code {
    private ViewModel? Model { get; set; }
    
    private IEnumerable<PublishData> SortedData
    {
        get { return Model.LatestData.OrderByDescending(x => x.Timestamp); }
    }

    protected override void OnInitialized()
    {
        var settings = Configuration.GetSection("mqtt").Get<Models.MqttSettings>() ??
                       new MqttSettings("none", 0, string.Empty, string.Empty, string.Empty, string.Empty);
        
        Model = new ViewModel
        {
            MqttSettings = settings,
            PublishSettings = new PublishViewModel(MqttRepository),
            Protocol = new ProtocolViewModel(settings.Protocol)
        };
    }
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender) return;
        
        await RefreshMqttData();
        
        using var periodicTimer = new PeriodicTimer(TimeSpan.FromSeconds(5));
        while (await periodicTimer.WaitForNextTickAsync())
        {
            await RefreshMqttData();
        }
    }
    
    private async Task RefreshMqttData()
    {
        if (Model != null)
        {
            var latestData = MqttRepository.GetAllData().OrderByDescending(x=>x.Timestamp).Take(50).ToList();
            var ids = latestData.Select(x => x.Id).ToArray();
            Model.LatestData.RemoveAll(x => ids.Contains(x.Id) == false);
            Model.LatestData.AddRange(latestData.Where(data => Model.LatestData.All(x => x.Id != data.Id)));
        }
        
        await InvokeAsync(StateHasChanged);
    }

    private class ViewModel
    {
        public PublishViewModel? PublishSettings { get; set; }

        public MqttSettings? MqttSettings { get; set; }
        
        public ProtocolViewModel Protocol { get; set; }

        public List<PublishData> LatestData { get; } = new();
    }

    private class PublishViewModel
    {
        private readonly IMqttRepository _mqttRepository;

        public PublishViewModel(IMqttRepository mqttRepository)
        {
            _mqttRepository = mqttRepository;
            _interval = _mqttRepository.GetPublishInterval().Seconds;
        }

        private int _interval;

        public int Interval
        {
            get => _interval;
            set
            {
                _interval = value;
                _mqttRepository.SetPublishInterval(value);
            }
        }
    }

    private class ProtocolViewModel(string value)
    {
        public bool Mqtt => value.Equals("mqtt", StringComparison.InvariantCultureIgnoreCase);
        public bool Mqtts => value.Equals("mqtts", StringComparison.InvariantCultureIgnoreCase);
        public bool Ws => value.Equals("ws", StringComparison.InvariantCultureIgnoreCase);
        public bool Wss => value.Equals("wss", StringComparison.InvariantCultureIgnoreCase);
    }

}